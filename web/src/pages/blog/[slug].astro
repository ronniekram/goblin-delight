---
import type { InferGetStaticParamsType } from "astro";
import { sanityClient } from "sanity:client";
import { Markdown } from "@astropub/md";

import { blogDetail, allBlogSlugs, type SanityBlog } from "@utils/sanity";

import Blog from "@layouts/blog.astro";

export async function getStaticPaths() {
  const posts = (await sanityClient.fetch(allBlogSlugs)) || [];
  return posts.map((post: { slug: { current: string } }) => ({
    params: { slug: post.slug.current },
  }));
}

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
const { slug } = Astro.params as Params;

const blog: SanityBlog = (await sanityClient.fetch(blogDetail, { slug })) || {};

// FOR TABLE OF CONTENTS: use query selector for each h1, h2, h3 and h4 within the blog__markdown container, all headings have id attached automatically for linking
---

<Blog {...blog} client={sanityClient}>
  <section class="blog__markdown" id="content">
    <Markdown of={blog.markdown} options={{ wrap: true }} />
  </section>
</Blog>

<script>
  const createTOC = () => {
    const content = document.getElementById(`content`);
    const toc = document.getElementById(`toc`);
    const allHeadings = content?.querySelectorAll(`h1, h2, h3, h4`);
    const headings = Array.from(allHeadings || []);

    headings.forEach((heading) => {
      const li = document.createElement(`li`);
      if (heading.tagName === `H2`) li.classList.add(`pl-2`);
      if (heading.tagName === `H3`) li.classList.add(`pl-4`);
      if (heading.tagName === `H4`) li.classList.add(`pl-7`);
      const anchor = document.createElement(`a`);
      anchor.href = `#${heading.id}`;
      anchor.textContent = heading.textContent;
      li.appendChild(anchor);
      toc?.appendChild(li);
    });
  };

  document.addEventListener(`DOMContentLoaded`, createTOC);
</script>
